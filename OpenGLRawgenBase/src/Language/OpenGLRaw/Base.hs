module Language.OpenGLRaw.Base (
    GLName(..), FType(..), ValueType(..), ModuleType(..),
    HSName, unHSName, Name(..),

    Major, Minor, Deprecated,

    Category(..), CompExtension, VendorName(..),
    showCompExtension,
    showCategory,
) where

import Control.Arrow(first)

import Language.Haskell.Exts.Syntax(Name(..))
-- import Text.OpenGL.Spec(Category(..), Extension(..), showCategory)

import Text.OpenGL

-- | The original name of something from OpenGL (thus the name as used in the
-- specification).
newtype GLName = GLName { unGLName :: String }
    deriving (Eq, Ord, Show)

-- | Simple type alias to make it clear that the name is an haskell identifier.
type HSName = Name

-- | Unwrapping the name into a string for final use.
unHSName :: HSName -> String
unHSName (Ident i) = i
unHSName (Symbol s) = s

data ValueType
    = EnumValue
    | BitfieldValue
    deriving (Eq, Ord, Show)

-- TODO: this is legacy code
newtype CompExtension = CE VendorName
    deriving (Eq, Ord)

showCompExtension :: CompExtension -> String
showCompExtension (CE (VendorName n)) = n

instance Show CompExtension where
    show = showCompExtension
instance Read CompExtension where
    readsPrec i s = map (first $ CE . VendorName) $ readsPrec i s

data Category
    = CompVersion Int Int Bool
    | CompExtension CompExtension String Bool
    | CompName String
    deriving (Eq, Ord)

showCategory :: Category -> String
showCategory c = case c of
    CompVersion ma mi dep
        -> "VERSION_" ++ show ma ++ "_" ++ show mi ++ if dep then "_COMPATIBILITY" else []
    CompExtension vendor name dep
        -> show vendor ++ "_" ++ name ++ if dep then "_COMPATIBILITY" else []
    CompName name
        -> name

-- | Major version number of OpenGL
type Major = Int
-- | Minor version number of OpenGL
type Minor = Int
-- | Deprecation flag
type Deprecated = Bool

-- | The type of a Module generated by OpenGLRaw
data ModuleType
    -- | A module defining one of the Core profiles
    = CoreInterface Major Minor Deprecated
    -- | A module defining an extension
    | ExtensionMod  CompExtension String Deprecated
    -- | A grouping module not tied to a specific `Extension` (Vendor)
    | TopLevelGroup
    -- | A grouping module for a specific `Extension` (Vendor)
    | VendorGroup   CompExtension
    -- | A module for compatibility between OpenGLRaw versions.
    | Compatibility
    -- | A module for internal use.
    | Internal
    deriving(Eq, Ord, Show)

-- | Simple typing, sufficient for OpenGL functions.
data FType
    = TCon String
    | TVar
    | TPtr FType
    | UnitTCon
    deriving (Eq, Ord, Show)
