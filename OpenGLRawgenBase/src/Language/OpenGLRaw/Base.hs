module Language.OpenGLRaw.Base (
    GLName(..), FType(..), ValueType(..), ModuleType(..),
    HSName, unHSName, Name(..),

    Major, Minor, Deprecated,

    Category(..), Extension(..),
    showCategory,
) where

import Language.Haskell.Exts.Syntax(Name(..))
import Text.OpenGL.Spec(Category(..), Extension(..), showCategory)

-- | The original name of something from OpenGL (thus the name as used in the
-- specification).
newtype GLName = GLName { unGLName :: String }
    deriving (Eq, Ord, Show)

-- | Simple type alias to make it clear that the name is an haskell identifier.
type HSName = Name

-- | Unwrapping the name into a string for final use.
unHSName :: HSName -> String
unHSName (Ident i) = i
unHSName (Symbol s) = s

data ValueType
    = EnumValue
    | BitfieldValue
    deriving (Eq, Ord, Show)

-- | Major version number of OpenGL
type Major = Int
-- | Minor version number of OpenGL
type Minor = Int
-- | Deprecation flag
type Deprecated = Bool

-- | The type of a Module generated by OpenGLRaw
data ModuleType
    -- | A module defining one of the Core profiles
    = CoreInterface Major Minor Deprecated
    -- | A module defining an extension
    | ExtensionMod  Extension String Deprecated
    -- | A grouping module not tied to a specific `Extension` (Vendor)
    | TopLevelGroup
    -- | A grouping module for a specific `Extension` (Vendor)
    | VendorGroup   Extension
    -- | A module for compatibility between OpenGLRaw versions.
    | Compatibility
    -- | A module for internal use.
    | Internal
    deriving(Eq, Ord, Show)

-- | Simple typing, sufficient for OpenGL functions.
data FType
    = TCon String
    | TVar
    | TPtr FType
    | UnitTCon
    deriving (Eq, Ord, Show)
